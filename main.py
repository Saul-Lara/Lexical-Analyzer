# This file was generated by the Tkinter Designer by Parth Jadhav
import os

from pathlib import Path

from src.Lexer import Lexer
from src.Parser import Parser

# Explicit imports to satisfy Flake8
from tkinter import (
    Tk,
    Canvas,
    Text,
    Button,
    PhotoImage,
    ttk,
    filedialog,
    messagebox,
    Scrollbar,
)

OUTPUT_PATH = Path(__file__).parent

ASSETS_PATH = OUTPUT_PATH / Path("assets/frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def open_file():
    """Opens a file dialog for the user to select a file.

    Once a file is selected, its content is read and displayed in the text area.
    """
    filepath = filedialog.askopenfilename(
        initialdir=os.getenv("DESKTOP"),
        title="Open File:",
        filetypes=(
            ("Text Files", "*.txt"),
            ("Basic Language Files", "*.basic"),
        ),
    )

    if len(filepath) == 0:
        return

    with open(filepath, "r") as reading:
        file = reading.read()

    entry_1.delete(0.0, "end")
    entry_1.insert(0.0, file)


def analyze_source_code():
    """Analyzes the given source code and returns the results in a dictionary.

    The dictionary contains analysis details, which will be displayed in the table.
    """
    source_code = entry_1.get(0.0, "end")

    # Check if source code is available for analysis
    if not bool(source_code and not source_code.isspace()):
        messagebox.showerror(
            title="Missing Source File",
            message="No source file selected.\n\nPlease choose a file before proceeding or write a basic code in the text area.",
        )
    else:
        for row in analysis_results_table.get_children():
            analysis_results_table.delete(row)

        tokens = Lexer(source_code).extract_tokens()
        analysis_result = Parser(tokens).validate_syntax()

        for row_data in tokens:
            analysis_results_table.insert(
                parent="",
                index="end",
                values=[row_data.line, row_data.type, row_data.value],
            )

        is_successful, message = (
            analysis_result["successful"],
            analysis_result["message"],
        )

        if is_successful:
            canvas.itemconfig(status_bar, fill="#34c240")
            canvas.itemconfigure(
                analysis_result_text,
                text=message,
                fill="white",
                font=("Inter Bold", 14 * -1, "bold"),
            )
        else:
            canvas.itemconfig(status_bar, fill="#f9aa33")
            canvas.itemconfigure(
                analysis_result_text,
                text=message,
                fill="#232f34",
                font=("Inter Bold", 14 * -1),
            )


window = Tk()

window.geometry("1000x550")
window.configure(bg="#063250")
window.title("Lexical Analyzer")

canvas = Canvas(
    window,
    bg="#063250",
    height=550,
    width=1000,
    bd=0,
    highlightthickness=0,
    relief="ridge",
)

canvas.place(x=0, y=0)
canvas.create_rectangle(0.0, 0.0, 1000.0, 72.0, fill="#0F72B3", outline="")

canvas.create_text(
    104.0,
    24.0,
    anchor="nw",
    text="Lexical Analyzer - Theory of computation",
    fill="#FFFFFF",
    font=("Inter Bold", 24 * -1),
)

image_image_1 = PhotoImage(file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(67.0, 34.0, image=image_image_1)

image_image_2 = PhotoImage(file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(238.0, 250.0, image=image_image_2)

image_image_3 = PhotoImage(file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(720.0, 284.0, image=image_image_3)

canvas.create_text(
    123.0,
    108.0,
    anchor="nw",
    text="Source code to evaluate",
    fill="#101720",
    font=("Inter Bold", 20 * -1),
)

image_image_4 = PhotoImage(file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(103.0, 120.0, image=image_image_4)

canvas.create_text(
    651.0,
    106.0,
    anchor="nw",
    text="Analysis results",
    fill="#101720",
    font=("Inter Bold", 20 * -1),
)

image_image_5 = PhotoImage(file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(633.0, 120.0, image=image_image_5)

entry_image_1 = PhotoImage(file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(238.0, 267.5, image=entry_image_1)
entry_1 = Text(
    bd=0,
    bg="#F8F8FF",
    fg="#000716",
    highlightthickness=0,
    font=("Segoe UI", 11),
)
entry_1.place(x=54.0, y=146.0, width=368.0, height=241.0)

# Configuring Analyze file button
button_image_1 = PhotoImage(file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=analyze_source_code,
    relief="flat",
)
button_1.place(x=253.0, y=430.0, width=186.0, height=46.0)

# Configuring Load file button
button_image_2 = PhotoImage(file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=open_file,
    relief="flat",
)
button_2.place(x=37.0, y=430.0, width=186.0, height=46.0)

status_bar = canvas.create_rectangle(
    0.0, 502.0, 1000.0, 550.0, fill="#232f34", outline=""
)

analysis_result_text = canvas.create_text(
    14.0,
    517.0,
    anchor="nw",
    text="",
    fill="#000000",
    font=("Inter Bold", 14 * -1),
)

# Configuring the table for analysis results
table_header_labels = ["Line", "Token", "Attribute"]

analysis_results_table = ttk.Treeview(
    master=window,
    columns=table_header_labels,
    show="headings",
)

for column in table_header_labels:
    analysis_results_table.heading(column=column, text=column)
    analysis_results_table.column(column=column, width=147)

table_style = ttk.Style()
table_style.theme_use("default")
table_style.configure(
    "Treeview",
    background="#394A56",
    fieldbackground="#394A56",
    foreground="#fff",
)

analysis_results_table.place(x=495, y=140, height=320)

table_scrollbar = Scrollbar(
    window, orient="vertical", command=analysis_results_table.yview
)
table_scrollbar.place(x=495 + 442, y=140, height=320)

analysis_results_table.configure(yscrollcommand=table_scrollbar.set)

window.resizable(False, False)
window.mainloop()
